module 模块
compile 编译
inherit  继承


Java的char一定是2个字节吗？
不一定，与我们使用的字符集有关系，如果使用ASCII编码集，那么char占用一个字节，如果使用UTF-8编码格式呢？UTF-8是不定长编码，编码的长度是动态的，所以不一定。
一个英文字母占一个字符即一个字节   用ASCII编码
一个汉字占两个字符 难道就是两个字节么？？
无符号16位？？？没错就是UTF-8编码 Unicode编码就是用两个字节存储
  ASCII编码无法存储汉字  只有256个无法表示这么多汉字 汉字贼多

byte 1
short 2
char 2(Unicode)  1(ASCII)  无符号16位
int 4
float 4
long 8
double 8

String 的 + 是字符串的连接  这个运算符是连接字符串的 就算数字也是一起连接的

String是引用数据类型


press Ctrl+Shift+空格:实例对象快捷键

虽然是java文件 但是经过javac编译变成.class文件
运行的其实就是类文件 万物皆类  编译成字节码文件 然后通过java虚拟机运行字节码文件（一次编译 到处运行）不同平台jvm不一样
运行时 就是运行main函数所以只需要一个main仅可 不然怎么叫函数入口呢？
while（布尔值）只能是真或假
boolean  a = true;
 while(a)――――――重点！！！
如果是 int a = 1
while（1）是错的 int跟boolea是不相容的
while条件不满足就跳出while循环不会陷入死循环




		数组是引用数据类型！！
		数组有两种实例化方式
					动态和静态




		int []score = new score [4];
		动态开辟空间都会有一个默认值
		动态初始化必须给其长度 不然报错
		int 0 String null char \uooo


   		int []score = new score[]{1,2,3,4}
		int []score = {1,2,3,4}
		静态中括号不用写数字 直接写数组中的值；
			score 为内存地址值

	数组初始化都有默认值只要new都会存在有默认的值！！
			数组索引永远比数组的长度小一



		数组的定义：数据类型+【】数组名称+数组长度；
class
		静态初始化不需要再new 【】中间加具体的数字
		int []money = new int[]{1,2,3,4}
		int [] money ={1,2,3,4}
		数组的取值是通过索引 即a[0]开始；
		数组获取的值=数组长度-1
		如果输出打印sout(数组名称) 输出的就是内存地址在（）哈希codes		哈希值是十六进制的（0-9，a-f）；
		获取数组具体的值：数组的名称加上[下标]；
			java划分了5块
				栈
					存放都是局部变量
					方法类的变量
					所有的方法的执行都是在栈里执行的
					变量存在于作用域
				堆
					只要是new出来的东西都在堆
					所有存在堆里的数据都有一个内存地址					堆里面的数据类型都有一个默认值
					char /u0000
				方法区
					存放字节码信息 即.class
					方法里的基本信息 比如方法名
			数组的赋值操作“
				本质是栈里面的引用 即数组名称为地址值指向堆内存中
				double scores [] = new double[5]
				int [] a = null;
					报出空指针异常

		



			粘
			堆
			方法区
					
			寄存器
			
 public static void main(String[] args) {

        this.play();    //this 对象引用迟于静态方法的加载 所有静态方法内部的对象引用不行
                        //加载静态方法时同时调用		本类 this 不能用于static方法中！！！！ 但是new一个对象可以


    }
            public static void play(){
                System.out.println("你个渣渣");
            }



this是一个指向本对象的指针, 然而super是一个Java关键字。  super不能放在静态区域里 同一个方法内只能调用一次this()或super()

		super只能用在方法里面  不能用在类里面
 @Override
    public void print() {
        super.print();
    }
}
public class Cat extends Animal {

super.print();		//会报错 

    @Override
    public void print() {
        super.print();
    }
}


Java中其他包中无法引用缺省包（default package）中的类		不管怎么样包都无法调用src目录下的类 还是得要创建一										个包放进去


		如：Animal d = new Dog（）
			d.speak()；
				编译器会检查这个方法，无论这个方法在Animal类型还是Dog类型，都能通过编译；
					 编译器认为只要定义了这个方法就行，就能编译通过；
		但是运行时，jvm会根据这个方法从下往上找这个方法，只要dog类有这个方法实现就运行dong类的方法；

		继承弄清是什么跟有什么关系  is-a  ，has-a  加菲猫是猫，冰箱是电器，但是不能说澡盆是浴室把？？
							只能说澡盆属于浴室，即浴室有一个澡盆，是含有关系。
								澡盆就类似于浴室类的实例变量；

	继承  子知父，父却不知子。如果是父类型的引用 也只能调用子类与父类相同的方法去运行。
		子类是父类一种更特别的类型，最好才用继承，不要以为因为河马对象有良好的发音方法，就让钢琴对象去继承人家把。。。。。应该是 含有的关系 创建一个发音对象即可，钢琴跟河马对象就都有发音对象的方法即可。即has-a含有关系。
		继承的核心是 抽取每个类共有的特征，并将它抽取出来封装成父类，每个类通过继承父类，即可实现减少代码重用。，修改子类们共有的方法时，直接在父类修改即可，不用一个一个修改子类
		重写：
			1.返回类型必须完全与被重写方法的返回类型相同； 父类用void 子类只能用void
		  Father father = new Son();	//声明为父类的引用类型，运行确实
        father.name="ada";		//赋值操作也是在儿子的堆上进行的。
        father.speak();			//虽然父类也有相同的方法，但是jvm运行机制是从子类开始运行。


		多态：
			引用类型可以与对象类型不同；
				如：Animal animal = new Dog();
						或者=new Cat（）;
						前提是Animal是他们的父类，在jvm运行是可以指向子类；
		那在方法内 我只要声明父类类型的参数，那我不就可以将多个对象传进方法里，再调用该对象的方法；
		如 giveShot（Animal a）	//这个居然是父类的参数，关于对象引用作为参数的，在运行时都是看new（）
			即堆内存的东西和方法进行操作。那我岂不是接着父类类型参数指向各个子类对象的堆内存。我想要cat对象的东西，号 那我就
			giveShot（对象名），来吧宝贝！！很强大的多态。运行的多态性，想要谁就要谁。大前提是父类型参数

			到时父类有新的子类  改子类对象一样得被我当做参数，进行操作 换行 我的函数一样操作他，
				无论是谁 都逃不过我如来的佛掌。


		继承的核心 还可以在改代码的时候通过子类的继承对原有代码进行相关方法的覆盖。牛逼！！！
			好比源代码是正版的，你继承后经过修改就不是原创的，算盗版吗？哈哈


			编译器会检查你这个引用变量（对象名）所调用的方法是否存在
			运行器（JVM）却是寻找new 类名（）堆上所指的方法。

		方法的重载：
			1.大前提是 参数个数或参数类型不同
			2.返回值类型你看着办
			3.注意！！！如果大前提是返回值类型不同 但是参数个数相同且类型相同。就不是重载了


	抽象类：	多态的有点开始展现：所有子类都会有抽象方法
			如果有抽象方法，就一定是是抽象类里面的
			有抽象类就不一定有抽象方法；




		instanceof：！！！不能是基本数据类型
			用法：比较该对象是哪种类型的？  比如 对象名+instanceof+类名：true即该对象是该类或者子类所创建的对象
					null可以也说是一个对象名，但是叫空对象！！如果它与instanceof比较都是空

				null不属于任何一个类；
			 Pet pet = new PetSon1("asd",2,2,"ada");
       			 PetSon1 petSon1 = (PetSon1)pet;
       			petSon1.study();
		引用类型的强制转换即父类的引用强制转换子类引用前提是需要有一个父类指向子类对象的引用；
非静态内部类不允许定义静态成员
public class Note {
         class Body{		//静态成员不能定义在内部类
             static int a =1;

        }

}
		哈希值相同，但是内存地址不一定相同，因为可以重写哈希值方法		

		父类属性是私有的，但是提供公共方法去访问
			子类在继承父类时，若想调用本类的属性进行操作（但是是私有的！！）
		这时我们只要在父类声明一个公共方法去利用父类属性，子类继承该方法自然就能达到操作本类属性的方法
		因为父类私有的属性是私有的 你子类不能通过this.age进行计算 ，你就先在父类进行变量的计算，以后子类覆盖调用即可避免子类无法访问自身属性的问题。



java 工具类的设计：
		1.不能被继承 即用final修饰
		2.不能被实例化，即将构造函数私有化
		3.外界就只能通过静态方法调用  方法名 前为static


class Test{
int arr [] = new int [] {2,4,6};
arr[2] = 8;   // 报错
}
类中可以定义类级变量，但不可以对变量进行操作
对变量的操作放在方法里面就可以了
编译器无法确保成员变量arr已经完成初始化，因此无法在成员方法和构造方法以外引用arr。
int a=3;   3放在常量池           //a存放的是3的内存地址，而3应该是在常量池中



汽车类项目感想：
	汽车需要被租赁，前提公司的要车；
		创建对象数组  对象数组的类型是父类参数！！
		通过方法对数组进行赋值，即给每一辆车进行初始化；
	找车！！！通过调用找车的方法返回一辆车的对象。
	付费   找车返回的车，进行该车的租金调用方法
	核心 找车：一个循环，参数是品牌类型；

		1.判断对象数组是否为空 cars！=null&&cars.length>0
		2.对象数组含有轿车对象和bus对象 先判断指向对象所属的类
		
			if（car instanceof 轿车类）
				进行多态的向下转型
					轿车类 seatcar=(轿车类)car；
			最后根据传入的形参进行返回对象的操作

父类引用可以指向子类引用 将Car c ：cars 
	for（Car c：cars）//cars为对象数组名称		是子类对象的引用。返回值类型要为父类
三元运算符得学会使用：
a>b?1:2;
判断使用位置：类似于if 只有两个选择情况可以使用，需要有变量接收表达式的值；


class A {
 
    static {
        System.out.print("1");
    }
 
    public A() {
        System.out.print("2");
    }
}
 
class B extends A{
 
    static {
        System.out.print("a");
    }
 
    public B() {
        System.out.print("b");
    }
}
 
public class Hello {
 
    public static void main(String[] args) {
        A ab = new B();	//先加载父类 先加载静态代码块，然后子类的静态代码块然后构造
        ab = new B();	//静态代码块只执行一次，所以直接父类构造，子类构造；
    }
 
}输出结果1a2b2b
				如果是int型数组 直接加个空串就是String
toCharArray()将字符串转为字符数组
spilt（）将字符串转为String数组	//spilt（分隔符） 通常是空窜；返回一个字符串数组
substring() 将字符串还是转变为字符串，只是被切出来了。

	



不带参数的toArray方法，是构造的一个Object数组，然后进行数据拷贝，此时进行转型就会产生ClassCastException?
②带参数的toArray方法，则是根据参数数组的类型，构造了一个对应类型的，长度跟ArrayList的size一致的空数组，虽然方法本身还是以 Object数组的形式返回结果，不过由于构造数组使用的ComponentType跟需要转型的ComponentType一致，就不会产生转型异常


集合元素的删除可以remove  但是for循环要从后往前删，while循环要注意，因为删除不删除元素，它的i往前推，你若要删除元素，i必须不变，即遍历集合的第一个元素，你若不删，需要往后移动，你若删除保持i不变。集合元素删除注意点！！！！ 
 

 				//不能直接从父类数组强转为子类数组
                                        //但是向上自动转型不会报错
                                        Object ab[]=new Object[3];  //未经过实例化
                                        String o[]= (String[]) ab;  //运行时出现转型错误
                                        for (int i = 0; i < o.length; i++) {
                                            System.out.println(o[i]);

 Object o[]=new Object[3];
 String arr[]= (String[]) o;//转换是不能以数组类型转换
可以通过泛型的toArray(T,t)一定得要带参数，不然数组类型转换不了

			 Student s[]=linkedHashSet.toArray(new Student[]{});
        for (int i = 0; i <s.length ; i++) {    //你无法在不重复的元素里遍历匹配整个集合里的元素

            shiyong(s[i],arr);      //根据班级名统计集合中出现的次数，及该班级下的平均分数
        }
        
    }//将利用LinkedHash的无重复元素与原集合元素比较
    public static void shiyong(Student s,Student arr[]){	//函数调用很重要！！
        int sum=0;int count=0;
        for (int i = 0; i <arr.length ; i++) {
            if (arr[i].getClassNum().equals(s.getClassNum())){
                count++;
                sum+=arr[i].getScore();
            }
        }
				其实上面的代码就是讲hashset的不重复元素匹配list集合全部元素，出现一次 count++；其实用map立马						map的键是不重复，值是重复的								解决
FileOutputStream(File file):

如果文件存在，但它是一个目录，而不是一个常规文件；或者该文件不存在，但无法创建它；抑或因为其他某些原因而无法打开它 
 


		GBK是两个字节无论英文还是中文都是两个字节 一个字符都是两个字节
			UTF-8是3个字节编码中文



我发现将程序运行过程中产生的有规律的数据可以存放到HashMap集合里面
		比如说统计重复的字母，就可以将字母出现时作为map的键值，由于键值的唯一性并且指向值
			键值对  key-values，values存放重复出现key的次数


		String跟byte类型互相转换  byte[]=String.getbytes();字符串转为byte类型数组
					String s=new String(byte[]); 其实可以用for循环加个空串就行
				集合与数组转换
				List集合 和 Set集合 都可以toArray()如果是转换为特定类型的数组，需要提前加个泛型限定
      双列集合 Map不可以直接toArray 需要转为Key的集合
				再通过单列的键值集合转换为数组即可
		String 的indexOf 和lastindexOf是返回指定字符的索引，subString是返回指定字符的索引上的字符串
			递归文件夹 判断是否为文件夹 isDictonary？
Java 去除字符串中的反斜杠"\"加两个斜杠\\\\
InputStream在read的时候，都是即时读取的，执行完马上就执行IO操作并返回数据。 
而OutputStream为了提高效率都不是即时输出的，write会把数据先写到缓存里面，积累够了再一次性做IO输出，所以你虽然write了，但数据还没传出去，flush方法就是强制对buffer里面的内容做IO输出

flush()方法

用来刷新缓冲区的,刷新后可以再次写出

close()方法

用来关闭流释放资源的的,如果是带缓冲区的流对象的close()方法,不但会关闭流,还会再关闭流之前刷新缓冲区,关闭后不能再写出

图片及任何非纯文本文件都是底层用字节信息表示，所以使用字符流就是在字节流的基础上进行转换为可阅读的一个字符，如果字节信息读不出相应的字符，就乱码。
					因为编码表中没有对应的字符匹配字节信息。比如说字符‘a’对应得byte的是97

	
		我在使用mHashMap的时候对键值对不是很理解，键是唯一的，值可以有很复杂的类型，比如对象啊，记录数字什么的。但是千万不要发生并发异常很恐怖，		又可以改变键，又可以改变值得一个很好的方法：
						使用while循环  判断while（map.containsKey(i)）
									i++;
		比如说改变学生系统的id 你删除之后又的添加id，那得先判断map集合是否有该主键，如果有，在键值的基础上+1，这样可以直接put(i,new Student(i))千万别用遍历集合进行判断，集合长度随着put会增加容易产生并发异常，需要在确定的循环几次下才能使用添加数据这个功能，比如统计后缀名文件个数，他就是默认在许多文件名的数组中遍历，再加以条件添加map里面<Stirng Integer>
			map.put(后缀名，1) else（map.put(后缀名,get(后缀名)+1)）

方式3:增强for循环
        // 增强for循环写的话会报同样的错误，因为它本身就是用来替代迭代器的
        // for (String s : array) {
        // if ("world".equals(s)) {
        // array.add("javaee");
        // }
        // }
        // System.out.println("list3:" + array);

栈区: 1.每个线程包含一个栈区，栈中只保存基础数据类型的值和对象以及基础数据的引用2.每个栈中的数据(基础数据类型和对象引用)都是私有的，其他栈不能访问。 3.栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)


加同步锁的原因是解决run方法内	 抢火车票案例，主线程含有一个count 的票变量 进行while循环输出票的数目
		共享资源问题
	因为开了三个线程。。，三个线程调用run方法，首先要有一个实现接口的共有的方法，都在里面进行操作。
join（）调用者进程进行完才结束进程。放start后面		yield（）礼让写在run方法里面，守护线程在start（）后面
多线程的问题中，可以使用Systen.exit(0)结束虚拟机，这样某个线程run完之后结束虚拟机，其他线程没得玩，尴尬！！
		使用同步锁的地方时，多个线程想要进去修改相关的变量值。比如说线程运行时还没运行完，其他线程又跑进来搞搞阵

                  
  

                                     

只要sleep和yield是静态方法
   
                            
实现Runnable的接口类的重写run方法其实就是给Thread对象一个任务，Thread的参数就是任务
		Thread就好像是一个工人，new一个工人出来就只是一个不干活的人，只有处于start（）状态变为可开始工作的工人，等cpu调度给工人，就可以开始工作
                            
单处理嚣的机器只能有一个线程
虽然可以开启多个线程，但是多个线程访问进程资源时，会出现并发问题。就那么点资源，怎么分配？、线程都是自私的，只执行任务。在run方法内对共有对象进行访问，调用方法

		当有多个线程共用一种临界资源的时候，便会出现冲突，锁就是用来解决这种冲突的
 wait和notify配对使用！！使用obj对象锁住同步代码块。。
		枚举常量就是一个实例，枚举类可以自己定义一个私有构造，传参，value（）是返回一堆常量也就是实例


进行socket编程时，先进行客户端或者服务器的关闭，再进行流对象的关闭

	使用当前时间来对文件进行命名 保证每次传的文件（可能重复）都能上传
   InetAddress addr = InetAddress.getLocalHost();  
         String ip=addr.getHostAddress().toString(); //获取本机ip  
         String hostName=addr.getHostName().toString(); //获取本机计算机名称  
         System.out.println(ip);
         System.out.println(hostName);
删除一个文件夹所有的东西，就直接在for循环里delete 再递归

 ServerSocket serverSocket = new ServerSocket(6666);
        Socket socket=null;
            while (true){
                //当有多个客户端进行端口访问时，服务器开启多线程
                //服务器根据情况使用while循环接收多个socket主机请求连接
                /*但是你只有一个accept，每当有一个客户访问，就run它，执行读取，第二个也能被监听到
                *       */
            socket = serverSocket.accept();
                Mythread mythread1 =new Mythread(socket);
                new Thread(mythread1).start();
            }


在使用UDP无连接进行发送数据包时，需要先receive 数据包，再进行包的拆解，如果只是先拆解数据包，这个数据包都是空的没有收到服务器发来的信息！！！
 byte by[] = new byte[1024];
        DatagramPacket dp1 = new DatagramPacket(by, by.length);
        ds.receive(dp1);//在客户端里面，如果没有收到东西，receive后面不会执行！！
        byte b1 [] = dp1.getData();
        if (b1!=null){
            System.out.println("数据包有东西");
        }
        else {
            System.out.println("数据包没东西");
        }
        System.out.println(new String(b1,0,b1.length));
	先接受数据包，后面的程序才能运行并 receive就是接受数据包，如果没有接受，一切都是空的数据包

	在服务器使用多线程时 使用while循环 因为多个客户端需要多个监听器返回一个链接，每个客户端使用一个Socket，不要共用

 while (true){
                //当有多个客户端进行端口访问时，服务器开启多线程
                //服务器根据情况使用while循环接收多个socket主机请求连接
                /*但是你只有一个accept，每当有一个客户访问，就run它，执行读取，第二个也能被监听到
                *       */
            socket = serverSocket.accept();
                Mythread mythread1 =new Mythread(socket);
                new Thread(mythread1).start();
            }

另外对于tcp套接字来说，无论数据是在等候接受还是即将抵达，都要重置连接（注意对于udp协议来说，仍然接受并排列传入的数据，因此udp套接字而言shutdown毫无意义）。如果选择SE_SEND,则表示不允许再调用发送函数。对于tcp套接字来说，这意味着会在所有数据发送出并得到接受端确认后产生一个FIN包。如果指定SD_BOTH，答案不言而喻。


		虽然在大多数的时候可以直接使用Socket类或输入输出流的close方法关闭网络连接，但有时我们只希望关闭OutputStream或InputStream，而在关闭输入输出流的同时，并不关闭网络连接。这就需要用到Socket类的另外两个方法：shutdownInput和shutdownOutput，这两个方法只关闭相应的输入、输出流，而它们并没有同时关闭网络连接的功能。虽然在大多数的时候可以直接使用Socket类或输入输出流的close方法关闭网络连接，但有时我们只希望关闭OutputStream或InputStream，而在关闭输入输出流的同时，并不关闭网络连接。这就需要用到Socket类的另外两个方法：shutdownInput和shutdownOutput，这两个方法只关闭相应的输入、输出流，而它们并没有同时关闭网络连接的功能。
				使用shutdown好像flush刷进去，但是一定要读完你再刷，不然刷两个就没得刷了！！
			所以可以将shutdownInput放入while 每次都将数据发送或接受，如何还是没断开连接，只是没得输入了！！

		.java.转换为.class通过编译器即javac，最后运行通过jvm编译成二进制。
Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的



	在类里面实现对象的创建，如果放在属性后面进行实例化没什么区别，但是一开始实例化如何再给类属性=赋值操作，那那就是取最后属性的值。
		public class SingleTest {
    private static   SingleTest singleTest =new SingleTest();
    public static int value1;
    public   static int value2=0;

    private SingleTest(){
        value1++;
        value2++;
    }
经过构造器，他们的实例的值发现变化，不再是空
	反射：
		要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.
	使用反射来在本类创建一个读取配置文件流
	InputStream inputStream = Test03.class.getResourceAsStream("1.properties");！！！一定得要直接在同一包下配置！！
        properties.load(new InputStreamReader(inputStream,"UTF-8"));//系统默认是以UTF-8形式读取
		
        //后面就是读取配置文件的信息
        System.out.println(properties.getProperty("A") );
	接口中的常量要初始化

package demo05;

public class Test {
    public static void main(String[] args) {
        new Dog();
    }

}
class Animal{
    void show(){	//被子类重写
        System.out.println("父类构造的show方法被调用");
    }
    Animal(){
        show();
        System.out.println("正在调用父类构造");

    }
}
class Dog extends Animal{//先进行初始化，再对属性的赋值，最后进行构造器的赋值
    private  int age=2;	//父类访问子类属性，初始化默认为0了
    void show(){
        System.out.println("子类的show方法被调用"+age);	//一开始是0，后来运行
    }
    Dog(){



        System.out.println("子类的构造被调用");
        show();
    }
}
		它会隐式调用父类的构造，但是父类构造没有子类特有的属性，于是运行子类重写后的show方法，show方法访问age属性，这时候的age属性是被初始化为0的，回到子类才开始改变age的值，顺序是先父类构造，如果访问子类的属性，默认是0，然后初始化子类，先进行赋值再对构造器进行赋值。
		48代表字符0的值，A：64 a：97

		学会使用spiilt 在切割时遇到联系相同的切割字符时，会产生空窜！！！ 需要用正则[\\d]+来切割


 程序计数器，记录线程当前所执行的字节码行号指示器，通过改变计数，指向不同的线程执行。
属于线程私有的数据区域，是一小块内存空间，主要代表当前线程所执行的字节码行号指示器

1.String   new String创建两个对象 特殊一点
2.如果String常理池中，没有创建"xyz"，则会创建两个对象，一个对象的值是"xyz"，一个对象new String("xyz")